2017-10-24
	I took the example from hatcher and began modifying the code to allow
	more paramters for analysis of the program. I ran into a particularly
	annoying issue when trying to refactor the thread-creation code; Threads
	needed both constant state and variable state. This meant I couldn't
	just create a worker_context struct to pass in state, but instead had
	to use global variables like Hatcher did with the threads. This is a
	flaw with the design of the pthreads library, which makes writing
	threaded applications with it harder.

2017-10-30
	Due to a misunderstanding of the pi code, I reverted the changes I
	made on the 24th and instead cleaned up the code a bit to suite my
	style and will add more parameterization through commandline flags.
	One note about C++ (and C) pthreads is that the API of having only a
	single void * argument to a thread makes it more complex to pass in
	more than a single pointer-sized value to a thread.

2017-10-07
	Updated to the pi codebase to be more C++ like, using lists and
	std::cout instead. I found while doing this I remebered how I
	greatly dislike C++'s std::cout syntax, as it creates very long
	segmented strings that are harder to grep for. Other than that it
	is still really similar to the original C implementation, and is not
	fully representative of what it is like to code in C++.
